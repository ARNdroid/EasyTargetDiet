buildscript {
    repositories {
        mavenCentral()
    }

    dependencies {
        classpath 'com.android.tools.build:gradle:0.12.2'
    }
}

apply plugin: 'com.android.application'

repositories {
    mavenCentral()
}

def validateVersionPropertiesOrThrow() {

    int major = Integer.parseInt(gradle_version_major)
    int minor = Integer.parseInt(gradle_version_minor)
    int hotfix = Integer.parseInt(gradle_version_hotfix)
    logger.debug "Version: major = ${major}, minor = ${minor} and hotfix = ${hotfix}"

    if (major < 0) {
        throw new InvalidUserDataException("Version major = ${major}. Must be a positive integer")
    }
    if (minor < 0 || minor > 99) {
        throw new InvalidUserDataException("Version minor = ${minor}. Must be between 0 and 99.")
    }
    if (hotfix < 0 || hotfix > 99) {
        throw new InvalidUserDataException("Version hotfix = ${hotfix}. Must be between 0 and 99.")
    }
}

def etdVersionCode() {
    validateVersionPropertiesOrThrow()

    int major = Integer.parseInt(gradle_version_major)
    int minor = Integer.parseInt(gradle_version_minor)
    int hotfix = Integer.parseInt(gradle_version_hotfix)
    logger.debug "Version: major = ${major}, minor = ${minor} and hotfix = ${hotfix}"

    return 10000 * major + 100 * minor + hotfix
}

def etdVersionName() {
    validateVersionPropertiesOrThrow()
    return "${gradle_version_major}.${gradle_version_minor}.${gradle_version_hotfix}"
}

def etdStoreFile() {
    Properties properties = new Properties()
    properties.load(project.file('local.properties').newDataInputStream())
    return properties.getProperty('local_store_file')
}

def etdKeyAlias() {
    Properties properties = new Properties()
    properties.load(project.file('local.properties').newDataInputStream())
    return properties.getProperty('local_key_alias')
}

def etdAllowRelease() {
    Properties properties = new Properties()
    properties.load(project.file('local.properties').newDataInputStream())
    return properties.getProperty('local_allow_release')
}

def etdConfirmVersionOrThrow() {
    logger.lifecycle "ETD ==> Current version is ${etdVersionName()} (${etdVersionCode()})"
    String answer = System.console().readLine('\nETD ==> Enter yEs to accept this version: ')
    if (!'yEs'.equals(answer)) {
        logger.lifecycle "ETD ==> User entered ${answer}. Build will fail (stop)."
        throw new InvalidUserDataException("Current version ${etdVersionName()} (${etdVersionCode()}) NOT accepted.");
    }
}

logger.lifecycle "ETD ==> Current version is ${etdVersionName()} (${etdVersionCode()})"

android.applicationVariants.all { variant ->
    println "*********" + variant.description + "**********";
    println "variant.baseName = ${variant.baseName}"
    def variants = variant.baseName.split("-");
    def apkName = "EasyTargetDiet-";
    apkName += variants[0];
    apkName += "-v" + android.defaultConfig.versionName;
    if (!variant.zipAlign) {
        apkName += "-unaligned";
    }
    if (variant.buildType.name == "release") {
        apkName += "-RELEASE.apk";
    } else {
        apkName += "-SNAPSHOT.apk";
    }
    println "*********" + "$project.buildDir/outputs/apk/" + apkName + "**********";
    variant.outputFile = file("$project.buildDir/outputs/apk/" + apkName)
}

android {
    compileSdkVersion 19
    buildToolsVersion '20'

    defaultConfig {
        applicationId 'br.com.arndroid.etdiet'
        minSdkVersion 11
        targetSdkVersion 19
        versionName etdVersionName()
        versionCode etdVersionCode()
    }

    signingConfigs {
        release {
            storeFile file(etdStoreFile())
            storePassword System.console().readLine('\nETD ==> Enter storePassword: ')
            keyAlias etdKeyAlias()
            keyPassword System.console().readLine('\nETD ==> Enter keyPassword: ')
        }
    }

    buildTypes {
        debug {
            applicationIdSuffix '.debug'
        }
        release {
            signingConfig signingConfigs.release
        }
    }

}

dependencies {
    compile 'com.android.support:appcompat-v7:20.0.0'
    compile 'com.android.support:support-v4:20.0.0'
    compile group: 'com.github.tony19', name: 'logback-android-core', version: '1.0.10-2'
    compile group: 'com.github.tony19', name: 'logback-android-classic', version: '1.0.10-2'
    compile group: 'org.slf4j', name: 'slf4j-api', version: '1.7.5'
}